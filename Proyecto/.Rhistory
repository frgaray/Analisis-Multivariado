#'
#' @param `fit` el modelo, de preferencia clase lm al que hará las pruebas.
#'
#' @returns un dataframe con una columna para pruebas y otra para pvalues.
pruebas <- function(x) {
result <- data.frame('Prueba', 'p-value')
#Homocedasticidad
#H0: la varianza es constante
result[1,1] <- "car::ncvTest"
result[1,2] <- car::ncvTest(x)$p
#Si se rechaza H0, hay evidencia en contra de la homocedasticidad
#' Prueba supuestos de un modelo
#'
#' `pruebas` imprime los test que realiza al modelo recibido y sus p-values
#'           correspondientes.
#'
#' @param `x` el modelo, de preferencia clase lm al que hará las pruebas.
#'
#' @returns un dataframe con una columna para pruebas y otra para pvalues.
pruebas <- function(x) {
result <- data.frame('Prueba', 'p-value')
#Homocedasticidad
#H0: la varianza es constante
result[1,1] <- "car::ncvTest"
result[1,2] <- car::ncvTest(x)$p
#Si se rechaza H0, hay evidencia en contra de la homocedasticidad
#' Prueba supuestos de un modelo
#'
#' `pruebas` imprime los test que realiza al modelo recibido y sus p-values
#'           correspondientes.
#'
#' @param `x` el modelo, de preferencia clase lm al que hará las pruebas.
#'
#' @returns un dataframe con una columna para pruebas y otra para pvalues.
pruebas <- function(x) {
result <- data.frame('Prueba', 'p-value')
#Homocedasticidad
#H0: la varianza es constante
result[1,1] <- "car::ncvTest"
result[1,2] <- car::ncvTest(x)$p
#Si se rechaza H0, hay evidencia en contra de la homocedasticidad
#Normalidad
#Se basa en los residuales estandarizados o estudentizados
#H0: los datos provienen de una distribución normal
library(broom)
data.aug=augment(x)
result[2,1] <- "shapiro.test"
result[2,2] <- shapiro.test(data.aug$.std.resid)$p
result[3,1] <- "normtest::jb.norm.test"
result[3,2] <- normtest::jb.norm.test(data.aug$.std.resid)$p
#Si se rechaza H0, hay evidencia en contra de la normalidad
#Linealidad
#H0: Agregar la variable al cuadrado tiene parámetro igual a 0
a <- car::residualPlots(x)
n <- length(a[,2])
result[4,1] <- "car::residualPlots"
for (i in 1:n) {
result[4+i,1] <- names(a[,2][i])
result[4+i,2] <- as.double(a[,2][i])
}
#Si se rechaza H0 para alguna, quizás se podría agregar al cuadrado en el modelo.
result
return(result)
}
df <- pruebas(fit)
df
class(df)
class(fit)
data <- read.csv('Datos/Preg1A.csv')
data$sex <- factor(data$sex, labels = c('Hombre', 'Mujer'))
#i)
fit <- lm(bpdiast ~ tcresult + age + sex, data)
summary(fit) #El modelo tiene sentido, pues p-value = 2.7e-05
?prcomp
R.CP <- prcomp(datos, scale = T)
data <- na.omit(read.csv("Datos/Dat3ExA.csv")[,-1])
data <- na.omit(read.csv("Datos/Dat3ExA.csv")[,-1])
data2 <- data
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
ggpairs(data, title="Datos", aes(colour = k))
}
distances <- c("euclidian", "maximum", "canberra", "manhattan")
clustDistances <- c("ward.D", "ward.D2", "single", "complete")
hclust_analysis <- function(data, distance, clustDist) {
for (s1 in distance) {
dis <- dist(data, method = s1)
for (s2 in clustDist) {
jer <- hclust(dis, method = s2)
plot(jer, main = paste(s1, s2))
}
}
}
R.CP <- prcomp(data, scale = T)
fviz_eig(R.CP)
library(factoextra)
library(factoextra)
library(NbClust)
R.CP <- prcomp(data, scale = T)
fviz_eig(R.CP)
fviz_pca_var(R.CP,
col.var = "contrib")
??fviz_pca_var
fviz_pca_ind(R.CP, geom.ind = "point",
col.ind = as.factor(datosc3$k3),
axes = c(1, 2),
pointsize = 1.5, cex = 0.8)
fviz_pca_var(R.CP,
col.var = "contrib", cex = 0.8)
fviz_pca_var(R.CP,
col.var = "contrib", cex = 0.1)
??ggpar
fviz_pca_var(R.CP,
col.var = "contrib", caption = "puto")
fviz_pca_var(R.CP,
col.var = "contrib")
fviz_pca_var(R.CP,
col.var = "contrib", title ="puto")
fviz_pca_var(R.CP,
col.var = "contrib", font.main = "puto")
fviz_pca_var(R.CP,
col.var = "contrib", font.main = T)
fviz_pca_var(R.CP,
col.var = "contrib", font.main = F)
fviz_pca_var(R.CP,
col.var = "contrib", cex=0.1)
fviz_pca_var(R.CP,
col.var = "contrib", font.x = 14)
fviz_pca_var(R.CP,
col.var = "contrib", font.x = 50)
fviz_pca_var(R.CP,
col.var = "contrib", font.tickslab = c(14, "bold", "red"))
fviz_pca_var(R.CP,
col.var = "contrib", font.tickslab = c(50, "bold", "red"))
fviz_pca_var(R.CP,
col.var = "contrib")
fviz_pca_var(R.CP,
col.var = "contrib",
alpha.var = 10)
fviz_pca_var(R.CP,
col.var = "contrib",
alpha.var = 100)
fviz_pca_var(R.CP,
col.var = "contrib",
geom = "text")
fviz_pca_var(R.CP,
col.var = "contrib")
dataKmeans <- data
kmeans_analysis(dataKmeans)
dataKmeans
kmeans_analysis(dataKmeans)
data <- na.omit(read.csv("Datos/Dat3ExA.csv")[,-1])
library(GGally)
kmeans_analysis(dataKmeans)
kmeans_analysis(dataKmeans)
dataKmeans
dataKmeans <- data
dataKmeans <- kmeans_analysis(dataKmeans)
dataKmeans <- kmeans_analysis(dataKmeans)
dataKmeans <- kmeans_analysis(dataKmeans)
kmeans_analysis(dataKmeans)
kmeans_analysis(data)
dataKmeans <- kmeans_analysis(data)
dataKmeans <- kmeans_analysis(data)
dataKmeans
class(dataKmeans)
class(dataKmeans)
datos <- na.omit(read.csv("Datos/Dat3ExA.csv")[,-1])
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
ggpairs(data, title="Datos", aes(colour = k))
return(data)
}
dataKmeans <- kmeans_analysis(datos)
dataKmeans
dataKmeans <- kmeans_analysis(datos)
dataKmeans
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
ggpairs(data, title="Datos", aes(colour = k));
return(data)
}
dataKmeans <- kmeans_analysis(datos)
dataKmeans <- kmeans_analysis(datos)
kmeans_analysis(datos)
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
ggpairs(data, title="Datos", aes(colour = k))
}
datos <- na.omit(read.csv("Datos/Dat3ExA.csv")[,-1])
kmeans_analysis(datos)
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
ggpairs(data, title="Datos", aes(colour = k))
return(data)
}
kmeans_analysis(datos)
plot(ggpairs(data, title="Datos", aes(colour = k)))
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
plot(ggpairs(data, title="Datos", aes(colour = k)))
return(data)
}
kmeans_analysis(datos)
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
ggpairs(data, title="Datos", aes(colour = k))
return(data)
}
kmeans_analysis(datos)
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
datoss = data
ggpairs(data, title="Datos", aes(colour = k))
return(datoss)
}
kmeans_analysis(datos)
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
datoss = data
ggpairs(data, title="Datos", aes(colour = k))
Sys.sleep(15)
return(datoss)
}
kmeans_analysis(datos)
return(data)
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
ggpairs(data, title="Datos", aes(colour = k))
return(data)
}
kmeans_analysis(datos)
?return
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
ggpairs(data, title="Datos", aes(colour = k))
data
}
kmeans_analysis(datos)
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
if (T)
ggpairs(data, title="Datos", aes(colour = k))
data
}
kmeans_analysis(datos)
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
ggpairs(data, title="Datos", aes(colour = k))
}
kmeans_analysis(datos)
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
ggpairs(data, title="Datos", aes(colour = k))
data
}
kmeans_analysis(datos)
library(factoextra)
library(NbClust)
library(GGally)
datos <- na.omit(read.csv("Datos/Dat3ExA.csv")[,-1])
dataKmeans <- data
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
ggpairs(data, title="Datos", aes(colour = k))
data
}
kmeans_analysis(datos)
kmeans_analysis(as.data.frame(scale(data2)))
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k=factor(kmeans$cluster)
ggpairs(data, title="Datos", aes(colour = k))
}
kmeans_analysis(datos)
data
datos
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k <- factor(kmeans$cluster)
ggpairs(data, title="Datos", aes(colour = k))
return(data$k)
}
kmeans_analysis(datos)
datos <- kmeans_analysis(datos)
clusters <- kmeans_analysis(datos)
clusters <- kmeans_analysis(datos)
clusters <- kmeans_analysis(data)
clusters <- kmeans_analysis(data)
data$k <- clusters
ggpairs(data, title="Datos", aes(colour = k))
datos <- na.omit(read.csv("Datos/Dat3ExA.csv")[,-1])
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
return(factor(kmeans$cluster))
}
data$k <- kmeans_analysis(data)
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
return(factor(kmeans$cluster))
}
data$k <- kmeans_analysis(data)
datos <- na.omit(read.csv("Datos/Dat3ExA.csv")[,-1])
data$k <- kmeans_analysis(data)
class(datos)
datos <- na.omit(read.csv("Datos/Dat3ExA.csv")[,-1])
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
return(factor(kmeans$cluster))
}
data$k <- kmeans_analysis(data)
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
data$k <- factor(kmeans$cluster)
return(data$k)
}
data$k <- kmeans_analysis(data)
library(factoextra)
library(NbClust)
library(GGally)
datos <- na.omit(read.csv("Datos/Dat3ExA.csv")[,-1])
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
return(factor(kmeans$cluster))
}
data$k <- kmeans_analysis(data)
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmean <- kmeans(data, k, nstart = 25)
return(factor(kmean$cluster))
}
data$k <- kmeans_analysis(data)
library(NbClust)
kmeans_analysis <- function(data, max.nc = 7, k = 0, seed = 1) {
if (k == 0) {
set.seed(seed)
plot(fviz_nbclust(data, FUNcluster = kmeans, method = c("silhouette"), k.max = max.nc, nstart = 20))
k <- NbClust(data, max.nc = max.nc, method = "kmeans", index = "silhouette")$Best.nc[[1]]
}
kmeans <- kmeans(data, k, nstart = 25)
return(factor(kmeans$cluster))
}
data$k <- kmeans_analysis(data)
ncFit <- naiveBayes(EVOLUCI ~ ., Datos)
source("~/Universidad/2023-1/Analisis-Multivariado/Proyecto/naiveclassifier.R", echo=TRUE)
setwd("~/Universidad/2023-1/Analisis-Multivariado/Proyecto")
source("~/Universidad/2023-1/Analisis-Multivariado/Proyecto/naiveclassifier.R", echo=TRUE)
n
levels(Datos$EVOLUCI) # Referencia nocomplica
#' Reducimos a dos variables. Si se complica el paciente o si no se complica
levels(Datos$EVOLUCI) <- list(nocomplica="ALTA - CURACION",
nocomplica="ALTA - MEJORIA",
nocomplica="ALTA - TRASLADO",
nocomplica="ALTA - VOLUNTARIA",
complica="CASO GRAVE -",
complica="CASO GRAVE - TRASLADO",
nocomplica="CASO NO GRAVE",
complica="DEFUNCION",
nocomplica="EN TRATAMIENTO",
nocomplica="REFERENCIA",
nocomplica="SEGUIMIENTO DOMICILIARIO",
nocomplica="SEGUIMIENTO TERMINADO")
levels(Datos$EVOLUCI) # Referencia nocomplica
ncFit <- naiveBayes(EVOLUCI ~ ., Datos) # Modelo Final
ncFit
nc.rep.holdout <- function(partition, B=50) {
ncTrain <- data.frame(1, 2, 3)[-1,]
colnames(ncTrain) <- c("global", "sensibilidad", "especificidad")
for (i in 1:B) {
train <- partition[,i]
test <- (-train)
trainModel <- naiveBayes(EVOLUCI ~ ., Datos[train,])
predb <- predict(trainModel, Datos[test,])
t <- table(Datos[test,"EVOLUCI"], predb)
global <- (t[1,1]+t[2,2])/sum(t)
spec <- t[1,1]/sum(t[1,])
sens <- t[2,2]/sum(t[2,])
print(c(global))
ncTrain[i,] <- c(global, spec, sens)
}
return(colMeans(ncTrain))
}
nc.rep.holdout(partition)
